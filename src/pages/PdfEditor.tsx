import { useEffect, useState, useRef } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { ArxivPaper } from '@/types/arxiv';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Download, Pencil, ExternalLink, FileText, Globe, Bot, Scissors } from 'lucide-react';
import { toast } from 'sonner';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import TextAnalyzer from '@/components/TextAnalyzer';
import { areApiKeysConfigured } from '@/services/apiKeyService';
import ApiKeyDialog from '@/components/ApiKeyDialog';

interface LocationState {
  paper: ArxivPaper;
  pdfUrl: string | null;
}

const PdfEditor = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { arxivId } = useParams<{ arxivId: string }>();
  const [annotationMode, setAnnotationMode] = useState(false);
  
  // Get state from location or reconstruct it
  const state = location.state as LocationState | undefined;
  const [paper] = useState<ArxivPaper | null>(state?.paper || null);
  const [pdfUrl, setPdfUrl] = useState<string | null>(state?.pdfUrl || null);
  const [isUrlMode, setIsUrlMode] = useState(false);
  const [isWebUrl, setIsWebUrl] = useState(false);
  
  // Google Docs viewer URL
  const [viewerUrl, setViewerUrl] = useState<string | null>(null);

  // Text analysis state
  const [isAnalyzerOpen, setIsAnalyzerOpen] = useState(false);
  const [keysConfigured, setKeysConfigured] = useState(false);
  const [isApiKeyDialogOpen, setIsApiKeyDialogOpen] = useState(false);
  
  // Ref for iframe to potentially handle messages from it
  const iframeRef = useRef<HTMLIFrameElement>(null);
  
  useEffect(() => {
    // Check if API keys are configured
    const configured = areApiKeysConfigured();
    setKeysConfigured(configured);
  }, []);
  
  useEffect(() => {
    // Check if we're in URL mode - if the ID is a URL
    try {
      const url = decodeURIComponent(arxivId || '');
      const isUrl = url.startsWith('http');
      setIsUrlMode(isUrl);
      
      // Check if it's a web URL (not ending with .pdf)
      const isPdfUrl = url.toLowerCase().endsWith('.pdf');
      setIsWebUrl(isUrl && !isPdfUrl);
      
      // If we don't have the paper info from state, reconstruct the URL
      if (!pdfUrl) {
        if (isUrl) {
          // For URL mode, the ID is the URL itself
          setPdfUrl(url);
        } else if (arxivId) {
          // For arXiv mode, construct the PDF URL
          const constructedUrl = `https://arxiv.org/pdf/${arxivId}.pdf`;
          setPdfUrl(constructedUrl);
        }
      }
    } catch (error) {
      console.error('Error handling URL:', error);
      // If decoding fails, assume it's an arXiv ID
      if (!pdfUrl && arxivId) {
        const constructedUrl = `https://arxiv.org/pdf/${arxivId}.pdf`;
        setPdfUrl(constructedUrl);
      }
    }
    
    // Create the viewer URL based on the type of content
    if (pdfUrl) {
      if (isWebUrl) {
        // For web URLs, use Toolhouse processing view
        // This assumes that the PDF is already generated by Toolhouse
        setViewerUrl(`https://docs.google.com/viewer?url=${encodeURIComponent(pdfUrl)}&embedded=true`);
        toast.success('Web content loaded');
      } else {
        // For PDF URLs, use Google Docs viewer
        setViewerUrl(`https://docs.google.com/viewer?url=${encodeURIComponent(pdfUrl)}&embedded=true`);
        toast.success('PDF viewer ready');
      }
    }
  }, [arxivId, pdfUrl, isUrlMode, isWebUrl]);

  const goBack = () => {
    navigate('/');
  };

  const toggleAnnotationMode = () => {
    setAnnotationMode(!annotationMode);
    toast.info(annotationMode ? "Annotation mode disabled" : "Annotation mode enabled");
  };

  const downloadPdf = async () => {
    if (!pdfUrl) return;
    
    try {
      // Create a safe filename
      const fileName = paper?.title 
        ? `${paper.title.replace(/[^a-z0-9]/gi, '_').substring(0, 50)}.pdf`
        : isUrlMode 
          ? `website_${new URL(pdfUrl).hostname.replace(/\./g, '_')}.pdf` 
          : `arxiv_${arxivId}.pdf`;
      
      // Create a link to download
      const link = document.createElement('a');
      link.href = pdfUrl;
      link.download = fileName;
      link.target = '_blank';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast.success('Download started');
    } catch (error) {
      console.error('Failed to download:', error);
      toast.error('Failed to download');
    }
  };

  const openInNewTab = () => {
    if (pdfUrl) {
      window.open(pdfUrl, '_blank');
    }
  };

  const handleAnalyzeText = () => {
    // Check if API keys are configured first
    if (!keysConfigured) {
      toast.error('API keys are required for text analysis');
      setIsApiKeyDialogOpen(true);
      return;
    }
    
    // Open the text analyzer
    setIsAnalyzerOpen(true);
    
    // Instruct the user how to use it
    toast.info('Select text from the PDF, copy it, and paste it in the analyzer', {
      duration: 5000,
    });
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* API Key Configuration Dialog */}
      <ApiKeyDialog 
        open={isApiKeyDialogOpen} 
        onOpenChange={setIsApiKeyDialogOpen}
        onKeysConfigured={() => setKeysConfigured(true)}
      />
      
      {/* Text Analyzer Component */}
      <TextAnalyzer 
        isOpen={isAnalyzerOpen} 
        onClose={() => setIsAnalyzerOpen(false)} 
      />
      
      <header className="bg-white border-b sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center">
            <Button 
              variant="outline" 
              size="icon" 
              onClick={goBack}
              className="mr-4"
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            
            <div>
              <h1 className="text-xl font-bold flex items-center">
                {isUrlMode ? (
                  <>
                    <Globe className="h-5 w-5 mr-2" />
                    {isWebUrl ? 'Web Content Viewer' : 'URL PDF Viewer'}
                  </>
                ) : (
                  <>
                    <FileText className="h-5 w-5 mr-2" />
                    ArXiv PDF Viewer
                  </>
                )}
              </h1>
              {paper && (
                <p className="text-sm text-muted-foreground line-clamp-1 max-w-[500px]">
                  {paper.title}
                </p>
              )}
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleAnalyzeText}
              className="flex items-center gap-1.5"
            >
              <Bot className="h-4 w-4" />
              Analyze Text
            </Button>
            
            <Button 
              variant="outline" 
              size="sm" 
              onClick={downloadPdf}
              className="flex items-center gap-1.5"
            >
              <Download className="h-4 w-4" />
              Download
            </Button>
            
            <Button 
              variant="default" 
              size="sm" 
              onClick={openInNewTab}
              className="flex items-center gap-1.5"
            >
              <ExternalLink className="h-4 w-4" />
              Open in New Tab
            </Button>
          </div>
        </div>
      </header>
      
      <main className="container mx-auto px-4 py-6 flex-1 flex flex-col">
        <div className="max-w-5xl mx-auto w-full flex-1 flex flex-col">
          <div className="space-y-4 flex-1 flex flex-col">
            <Card className="p-4">
              <div className="flex flex-wrap justify-between gap-4 mb-0">
                <div className="flex gap-2">
                  <Button 
                    variant={annotationMode ? "default" : "secondary"} 
                    onClick={toggleAnnotationMode}
                    className="flex items-center gap-1.5"
                  >
                    <Pencil className="h-4 w-4" />
                    {annotationMode ? "Exit Annotation Mode" : "Enable Annotations"}
                  </Button>
                </div>
                
                <div className="flex items-center gap-2">
                  <p className="text-sm text-muted-foreground hidden sm:block">
                    Need help? Select text, copy it (Ctrl+C), and click the "Analyze Text" button.
                  </p>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleAnalyzeText}
                    className="flex items-center gap-1.5"
                  >
                    <Scissors className="h-4 w-4" />
                    Extract & Analyze
                  </Button>
                </div>
              </div>
            </Card>
            
            <div className="bg-white rounded-lg shadow-lg overflow-hidden flex-1 flex flex-col">
              {viewerUrl ? (
                <>
                  <iframe 
                    ref={iframeRef}
                    src={viewerUrl}
                    className="w-full flex-1 min-h-[75vh] border-0"
                    frameBorder="0"
                    title="Content Viewer"
                    loading="eager"
                    sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
                  />
                  <div className="p-2 bg-muted text-sm text-muted-foreground text-center">
                    {isWebUrl ? 'Web content' : 'PDF'} displayed using Google Docs viewer. 
                    For native viewing, use the <strong>Open in New Tab</strong> button.
                  </div>
                </>
              ) : (
                <div className="p-12 text-center flex-1 flex items-center justify-center">
                  <div className="flex flex-col items-center">
                    {isUrlMode ? <Globe className="h-16 w-16 text-muted-foreground mb-4" /> : 
                                <FileText className="h-16 w-16 text-muted-foreground mb-4" />}
                    <p>Loading content viewer...</p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
      
      <footer className="py-6 border-t">
        <div className="container mx-auto px-4 text-center text-sm text-gray-500">
          PDF Search & Viewer | {isUrlMode ? (isWebUrl ? 'Web Content' : 'External PDF') : 'ArXiv Database'}
        </div>
      </footer>
    </div>
  );
};

export default PdfEditor;